#!/bin/bash

# ---------------------------------------------------------------------------- #
# GLOBAL VARIABLES (in script)                                                 #
# ---------------------------------------------------------------------------- #

# red output
RED='\033[0;31m'
# green output
GREEN='\033[0;32m'
# Yellow output
YELLOW='\033[0;33m'
# No Color
NC='\033[0m'
CONFDIR="/opt/websitemanager"
STATUS="$CONFDIR/status" 
VERSION="1.4.1"
mysqlcred="$CONFDIR/mysql"
requiredpkg="unzip git build-essential ca-certificates libnss3-tools libtool autoconf software-properties-common curl wget gcc g++ make dirmngr apt-transport-https dialog libnss3-tools"
commonpkg="filezilla cifs-utils resolvconf openssh-server"
databasepkg="mariadb-client mariadb-server"
apache="apache2 apache2-utils libapache2-mpm-itk openssl"
php70="php7.0-fpm php7.0-curl php7.0-common php7.0-bcmath php7.0-bz2 php7.0-intl php7.0-gd php7.0-mbstring php7.0-mysql php7.0-zip php7.0-json php7.0-xml"
php71="php7.1-fpm php7.1-curl php7.1-common php7.1-bcmath php7.1-bz2 php7.1-intl php7.1-gd php7.1-mbstring php7.1-mysql php7.1-zip php7.1-json php7.1-xml"
php72="php7.2-fpm php7.2-curl php7.2-common php7.2-bcmath php7.2-bz2 php7.2-intl php7.2-gd php7.2-mbstring php7.2-mysql php7.2-zip php7.2-json php7.2-xml"
php73="php7.3-fpm php7.3-curl php7.3-common php7.3-bcmath php7.3-bz2 php7.3-intl php7.3-gd php7.3-mbstring php7.3-mysql php7.3-zip php7.3-json php7.3-xml"
php74="php7.4-fpm php7.4-curl php7.4-common php7.4-bcmath php7.4-bz2 php7.4-intl php7.4-gd php7.4-mbstring php7.4-mysql php7.4-zip php7.4-json php7.4-xml"
php80="php8.0-fpm php8.0-curl php8.0-common php8.0-bcmath php8.0-bz2 php8.0-intl php8.0-gd php8.0-mbstring php8.0-mysql php8.0-zip php8.0-xml"
php81="php8.1-fpm php8.1-curl php8.1-common php8.1-bcmath php8.1-bz2 php8.1-intl php8.1-gd php8.1-mbstring php8.1-mysql php8.1-zip php8.1-xml"
php82="php8.2-fpm php8.2-curl php8.2-common php8.2-bcmath php8.2-bz2 php8.2-intl php8.2-gd php8.2-mbstring php8.2-mysql php8.2-zip php8.2-xml"
php83="php8.3-fpm php8.3-curl php8.3-common php8.3-bcmath php8.3-bz2 php8.3-intl php8.3-gd php8.3-mbstring php8.3-mysql php8.3-zip php8.3-xml"
# ---------------------------------------------------------------------------- #
# FUNCTIONS                                                                    #
# ---------------------------------------------------------------------------- #

#
# Echoes a red message
#
echo-red() {
    echo -e "${RED}$1${NC}"
}

#
# Echoes a green message
#
echo-green() {
    echo -e "${GREEN}$1${NC}"
}

#
# Echoes a yellow message
#
echo-yellow() {
    echo -e "${YELLOW}$1${NC}"
}




#
# Verifies sudo 
#
systemmanager-verify-sudo() {

    if [ "$EUID" -ne 0 ]
      then echo-red "Please execute as root eg: sudo"
      echo-red "else contact server administrator"	    
      exit 1
    fi
}

function mysqlcred(){
	if [ ! -f ${mysqlcred} ]; then
		echo-green "Setup Mysql account"
		echo-yellow "Please enter mysql username other then root"
	    	read mysqluser
		echo-yellow "Please enter mysql password"
		read mysqluserpasswd
                touch ${mysqlcred} 
#save mysql credentials in file for further uses
		echo -e "${mysqluser}\n${mysqluserpasswd}" > ${mysqlcred}
	else
	    mysqluser=$(head -n 1 ${mysqlcred})
	    mysqluserpasswd=$(tail -n 1 ${mysqlcred})  
fi
}


function installpkgselect(){
    #!/bin/bash
onoff=off
cmd=(dialog --output-fd 1 --separate-output --extra-button --extra-label "Select All" --cancel-label "Select None" --checklist "Select Packages:" 0 0 0)
load-dialog () {
    options=(
                1 "Essentials" on
                2 "Database" on
                3 "Apache required for phpmyadmin" on
                4 "Php7.0" $onoff
                5 "Php7.1" $onoff
                6 "Php7.2" $onoff
                7 "Php7.3" $onoff
                8 "Php7.4" on
                9 "Php8.0 required for phpmyadmin" on
                10 "Php8.1" on
                11 "Php8.2" on
                12 "Php8.3" on
                13 "Vscode" on
                14 "Google Chrome" on


    )
    choices=$("${cmd[@]}" "${options[@]}")
}
load-dialog
exit_code="$?"
while [[ $exit_code -ne 0 ]]; do
case $exit_code in
    1) clear; onoff=off; load-dialog;;
    3) clear; onoff=on; load-dialog;;
esac
exit_code="$?"
done
clear
for choice in $choices
do
    case $choice in
        1) Essentials="$commonpkg";;
        2) mariadb="$databasepkg";;
        3) apache2="$apache";; 
        4) php70fpm="$php70";;
        5) php71fpm="$php71";; 
        6) php72fpm="$php72";; 
        7) php73fpm="$php73";; 
        8) php74fpm="$php74";; 
        9) php80fpm="$php80";; 
        10) php81fpm="$php81";; 
        11) php82fpm="$php82";; 
        12) php83fpm="$php83";;
        13) vscode="on";;
        14) chrome="on";;
    esac
done
}

function mariadbselect(){	
	
	HEIGHT=15
	WIDTH=40
	CHOICE_HEIGHT=4
	BACKTITLE="Mariadb"
	TITLE="Select version"
	MENU="Choose one of the following options:"

	OPTIONS=(1 "Mariadb 10.4"
         2 "Mariadb 10.5"
         3 "Mariadb 10.6"
         4 "Mariadb 10.7"
         5 "Mariadb 10.8"
         6 "Mariadb 10.9"
         7 "Mariadb 10.10"
         8 "Mariadb 10.11")
        

	CHOICE=$(dialog --clear \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --menu "$MENU" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)

	clear
	case $CHOICE in
	        1)
	            dbv='4';;
	        2)
	            dbv='5';;
	        3)
	            dbv='6';;
	        4)
	            dbv='7';;
	        5)
	            dbv='8';;
	        6)
	            dbv='9';;
	        7)
	            dbv='10';;
	        8)
	            dbv='11';;
	        *)  
	            echo "wrong option selected, Try Again"
	            exit 1
	esac
}
mariarepo(){
    if [ ! -z $dbv ] && [ ! -f /etc/apt/sources.list.d/mariadb.list ]; then
        if [ ! -z "$mariadbupdate" ];then
           echo-green "Upgrading database to Mariadb-server-10.$dbv"        
        fi 
    echo-yellow "Fetching Latest Mariadb Script"
    curl -LsS https://r.mariadb.com/downloads/mariadb_repo_setup | sudo bash -s -- --mariadb-server-version="mariadb-10.$dbv" > /dev/null 2>&1
    echo-green "done"
    fi
}
function mariaupdate(){
    
	if [ -d /var/lib/mysql ] ; then
            mariadbupdate='n'
	    echo-red "Would you like to upgrade mariadb y/n" 
	    read mariadbupdate 
		if [ "$mariadbupdate" = "y" ];then
		echo-red "Mariadb datbase update requested"
		rmdb
		mariadbselect
		mariarepo    
		    
		fi    
        else
            mariadbselect
	    mariarepo    
	fi
}
function rmdb(){
    if [[ $mariadbupdate == 'y' ]]; then
        backupname=$RANDOM
        echo-red "taking existing databases backup to /var/lib/mysql_backup_$backupname"
        echo-red "it may take log time depend upon size of all DBs"
        service mysql stop && cp -r /var/lib/mysql /var/lib/mysql_backup_$backupname && service mysql stop
        rm /etc/apt/sources.list.d/mariadb*
	echo-red "Removing existing mariadb database engine" 
	    apt remove -y mariadb-*  > /dev/null 2>&1
    fi    
}
function apacherepo(){
        clear
        echo-green "setup Apache Repo "
        add-apt-repository ppa:ondrej/apache2 -y #> /dev/null 2>&1
        add-apt-repository ppa:ondrej/php -y #> /dev/null 2>&1
        echo-green "setup Apache Repo done"
}
function apacheconfig(){
    if [[ -z $Apache ]];then
        grep -q "/home/\*/public_html" "/etc/apache2/apache2.conf" 
        if [[ $? = 1 ]] ; then
sed -i '/#<Directory/i \
<Directory /home/*/public_html/> \
Options Indexes FollowSymLinks \
AllowOverride ALL \
Require all granted \
</Directory>' /etc/apache2/apache2.conf
fi
    a2enmod "proxy proxy_http proxy_fcgi setenvif actions alias auth_basic env expires headers http2 mime ssl rewrite request mpm_itk" > /dev/null 2>&1
    a2enconf  "php-fpm php7.0-fpm php7.1-fpm php7.2-fpm php7.3-fpm php7.4-fpm php8.0-fpm php8.1-fpm php8.2-fpm php8.3-fpm"  > /dev/null 2>&1
    fi
}

function phpconfig(){
for i in 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3
    do
       if [ -d "/etc/php/$i/fpm" ]; then
            #echo-red "/etc/php/$i/fpm"       
            cp $CONFDIR/phpini-templates/php$i.conf /etc/php/$i/fpm/php.ini
            #rm -f /etc/php/$i/fpm/pool.d/www.conf
        fi
        
    done
}

function updatewpcli(){
    if [ ! -f "/usr/local/bin/wp" ]; then
    rm -f /usr/local/bin/wp
    git config --global --unset-all remote.origin.proxy
    curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar 
    #> /dev/null 2>&1
    chmod +x wp-cli.phar
    mv wp-cli.phar '/usr/local/bin/wp'
    fi    
}
function sslsetup(){
    if [ ! -d "/etc/ssl/selfsigned" ] && [ ! -f "/etc/ssl/selfsigned/localhost.crt" ]; then
        mkdir -p /etc/ssl/selfsigned
        chmod +x "$CONFDIR/openssl/getcert.sh"
        cd $CONFDIR/openssl/
        echo-green "generating localhost SSL"         
        ./getcert.sh localhost
    fi    
}
function phpmyadmin(){
    if [ ! -d "/usr/share/phpmyadmin" ];then
    mkdir -p /usr/share/phpmyadmin
    fi
    if [ ! -f "/usr/share/phpmyadmin/index.php" ]; then
    sudo wget -q --read-timeout=5 https://files.phpmyadmin.net/phpMyAdmin/5.2.1/phpMyAdmin-5.2.1-all-languages.zip -O /usr/share/phpmyadmin/phpmyadmin5.2.1.zip

    cd /usr/share/phpmyadmin/ && unzip -qq phpmyadmin5.2.1.zip && mv phpMyAdmin-5.2.1-all-languages/* .
    rm -rf /usr/share/phpmyadmin/phpmyadmin5.2.1.zip phpMyAdmin-5.2.1-all-languages
     
    if [ -f "/etc/apache2/sites-available/default-ssl.conf" ]; then
       rm -f /etc/apache2/sites-available/default-ssl.conf
    fi   
    if grep -xqFe "Alias /phpmyadmin /usr/share/phpmyadmin" "/etc/apache2/sites-available/000-default.conf"; then
        echo ""
    else
cat << EOT > /etc/apache2/sites-available/000-default.conf
<VirtualHost *:80>
        Alias /phpmyadmin /usr/share/phpmyadmin
        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html
        ServerName localhost
        <Directory /usr/share/phpmyadmin>
          Options FollowSymLinks
            DirectoryIndex index.php
            AllowOverride all
            <FilesMatch \.php$>
                        SetHandler "proxy:unix:/run/php/php8.0-fpm.sock|fcgi://localhost"
            </FilesMatch>
        </Directory>
        <Directory /usr/share/phpmyadmin/setup>
            Require all denied
        </Directory>

        <Directory /usr/share/phpmyadmin/libraries>
            Require all denied
        </Directory>
        ErrorLog /error.log
        CustomLog /access.log combined
</VirtualHost>
<IfModule mod_ssl.c>
<VirtualHost *:443>
        Alias /phpmyadmin /usr/share/phpmyadmin
        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html
        ServerName localhost
        SSLEngine on
		SSLCertificateFile      /etc/ssl/selfsigned/localhost.crt
            SSLCertificateKeyFile   /etc/ssl/selfsigned/localhost.key
            SSLCACertificateFile /etc/ssl/selfsigned/ca-bundle.pem
        <Directory /usr/share/phpmyadmin>
          Options FollowSymLinks
            DirectoryIndex index.php
            AllowOverride all
            <FilesMatch \.php$>
                        SetHandler "proxy:unix:/run/php/php8.0-fpm.sock|fcgi://localhost"
            </FilesMatch>
        </Directory>
        <Directory /usr/share/phpmyadmin/setup>
            Require all denied
        </Directory>

        <Directory /usr/share/phpmyadmin/libraries>
            Require all denied
        </Directory>
        ErrorLog /error.log
        CustomLog /access.log combined
</VirtualHost>
</IfModule>
EOT
cat << EOT > /etc/php/8.0/fpm/pool.d/phpmyadmin.conf
[php-fpm]
user = www-data
group = www-data
listen = /run/php/php8.0-fpm.sock
listen.owner = www-data
listen.group = www-data
listen.mode = 0660
listen.allowed_clients = 127.0.0.1
pm = ondemand
pm.max_children = 10
pm.max_requests = 20
pm.max_spare_servers = 5
pm.min_spare_servers = 1
pm.process_idle_timeout = 10
pm.start_servers = 0
pm.status_path = /status
access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"
security.limit_extensions = .php .php3 .php4 .php5 .php7
php_admin_flag[allow_url_fopen] = on
php_admin_flag[log_errors] = on
php_admin_value[disable_functions] = exec,passthru,shell_exec,system
php_admin_value[short_open_tag] = on
php_value[error_reporting] = E_ALL & ~E_NOTICE
php_admin_flag[short_open_tag] = On
EOT
fi
fi
    
}

function reqpackages(){
    echo-green "Please wait while I'm installling essential packages, it may ask for input in initial phase."
        sudo apt-get install -y $requiredpkg 
        #> /dev/null 2>&1
}

function composer(){
    echo-yellow "remove existing composer & installing new version"
    rm -rf /usr/bin/composer
    cp $CONFDIR/vhosttemplates/composer.phar /usr/bin/composer
    chmod +x /usr/bin/composer
}
function dnssetup(){
    echo-red "Setup Custom DNS"
    customdns="n"
    echo-red "Would you use Custom DNS  y/N" 
    read customdns 
    if [ "$customdns" = "y" ];then   
	    systemctl disable systemd-resolved.service
	    systemctl stop systemd-resolved.service
	    unlink /etc/resolv.conf
	    touch  /etc/resolv.conf
	    echo-yellow "DNS1"
	    read DNS1
	    echo "nameserver 8.8.8.8" > /etc/resolv.conf
	    echo-yellow "DNS2"
	    read DNS2
	    echo "nameserver 1.1.1.1" >> /etc/resolv.conf
    fi
}
function mysqluser(){
    #echo "MySql username is $mysqluser"
    #echo "MySql Passwd is $mysqluserpasswd"
    mysql -e "GRANT ALL PRIVILEGES ON *.* TO '$mysqluser'@'localhost' IDENTIFIED BY '$mysqluserpasswd';"
    mysql -e "FLUSH PRIVILEGES;"
}

function servicesrestart(){
serviceslist=(
        mariadb
        apache2
        php70fpm
        php71fpm
        php72fpm
        php73fpm
        php74fpm
        php80fpm
        php81fpm
        php82fpm
        php83fpm
    )

for service in "${serviceslist[@]}"
do
  if ! [[ -z ${!service+x} ]]; then
   echo-yellow "enabling services on startup:"
   echo-green "$service enabled"
   sn=$(echo ${service} | echo "$service" | sed 's/[7-8]\B/&./g')
   service=$( echo ${sn} |sed 's/fpm/-fpm/g')
   systemctl daemon-reload
   systemctl enable  $service > /dev/null 2>&1
   systemctl start $service > /dev/null 2>&1
   systemctl restart $service > /dev/null 2>&1
            
  fi
done
}
function otherservices(){
     systemctl enable ssh  > /dev/null 2>&1
     systemctl start  ssh > /dev/null 2>&1

}
function installpackages(){

     echo-green "installing $mariadb $apache2 $php70fpm $php71fpm $php72fpm $php73fpm $php74fpm $php80fpm $php81fpm $php82fpm $php83fpm"
     apt install -y $mariadb $apache2 $php70fpm $php71fpm $php72fpm $php73fpm $php74fpm $php80fpm $php81fpm $php82fpm $php83fpm > /dev/null 2>&1

}
function chrome-browser(){
  if [ $chrome = "on" ];then 
  wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  echo-green "Installing Google Chrome"
  apt install -y -f ./google-chrome-stable_current_amd64.deb > /dev/null 2>&1
  rm google-chrome-stable_current_amd64.deb
  fi
}
function vscode(){
  if [ $vscode = "on" ];then  
  echo-green "Installing VSCODE"
  snap install code --classic > /dev/null 2>&1
  fi
}
function setupphpcli(){
spacer
echo-green "Setup default php cli version to 8.0"
update-alternatives --set php /usr/bin/php8.0 > /dev/null 2>&1
spacer
}

function installCAbrowsers(){
  echo-green 'installing CUSTOM CA Cert'
  if [ ! -d "/usr/local/share/ca-certificates" ];then
	mkdir -p /usr/local/share/ca-certificates
  fi
  if [ ! -f "/usr/local/share/ca-certificates/local-ca.crt" ];then
     ls -lah

    cp $CONFDIR/openssl/ca-bundle.pem /usr/local/share/ca-certificates/local-ca.crt && update-ca-certificates
  fi

}

function spacer(){
echo "============================================================================================================="
echo "============================================================================================================="
}

function success(){
    touch ${STATUS}
    V_STATUS=$(head -n 1 ${STATUS})
    if [ ! -f  "$STATUS" ] || [ ! "$V_STATUS" = "$VERSION" ]; then
        echo -e "${VERSION}\n" > $STATUS
        echo-green "=================================  Installation sucessfully completed  ==============================="
    fi
}

#execute functions
#echo-green "Executing Func. systemmanager-verify-sudo" 
systemmanager-verify-sudo
echo-green "Please wait while system updating apt updates"
sudo apt update
#-qq

l
#echo-green "Executing Func. reqpackages"
reqpackages
#echo-green "Executing Func. installpkgselect"
installpkgselect
#echo-green "Executing Func. mariaupdate"
mariaupdate
#echo-green "Executing Func. dnssetup"
spacer
dnssetup
#echo-green "Executing Func. mariarepo"
mariarepo
echo-green "Please wait while installing the required & selected packages"
spacer
apacherepo
installpackages
#echo-green "Executing Func. apacheconfig"
apacheconfig
#echo-green "Executing Func. phpmyadmin"
phpmyadmin
#echo-green "Executing Func. phpconfig"
phpconfig
#echo-green "Executing Func. updatewpcli"
updatewpcli
#echo-green "Executing Func. composer"
spacer
composer
#echo-green "Executing Func. ssl"
sslsetup
#echo-green "Executing Func. servicesrestart"
servicesrestart
#echo-green "Executing Func. mysqlcred"
mysqlcred
#echo-green "Executing Func. mysqluser"
mysqluser
#installing installCAbrowsers for system and users
installCAbrowsers
#echo-green "Executing Func. chrome-browser"
chrome-browser
#echo-green "Executing Func. vscode"
vscode
spacer
setupphpcli
success
spacer
