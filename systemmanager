#!/usr/bin/bash

# ---------------------------------------------------------------------------- #
# GLOBAL VARIABLES (in script)                                                 #
# ---------------------------------------------------------------------------- #

# red output
RED='\033[0;31m'
# green output
GREEN='\033[0;32m'
# Yellow output
YELLOW='\033[0;33m'
# No Color
NC='\033[0m'
CONFDIR="/opt/websitemanager"
mysqlcred="/opt/websitemanager/mysql"
requiredpkg="unzip git build-essential libtool autoconf software-properties-common curl wget gcc g++ make dirmngr apt-transport-https dialog"
commonpkg="git filezilla cifs-utils resolvconf openssh-server"
databasepkg="mariadb-client mariadb-server"
apache="apache2 apache2-utils libapache2-mpm-itk openssl"
php70="php7.0-fpm php7.0-curl php7.0-common php7.0-bcmath php7.0-bz2 php7.0-intl php7.0-gd php7.0-mbstring php7.0-mysql php7.0-zip php7.0-json"
php71="php7.1-fpm php7.1-curl php7.1-common php7.1-bcmath php7.1-bz2 php7.1-intl php7.1-gd php7.1-mbstring php7.1-mysql php7.1-zip php7.1-json"
php72="php7.2-fpm php7.2-curl php7.2-common php7.2-bcmath php7.2-bz2 php7.2-intl php7.2-gd php7.2-mbstring php7.2-mysql php7.2-zip php7.2-json"
php73="php7.3-fpm php7.3-curl php7.3-common php7.3-bcmath php7.3-bz2 php7.3-intl php7.3-gd php7.3-mbstring php7.3-mysql php7.3-zip php7.3-json"
php74="php7.4-fpm php7.4-curl php7.4-common php7.4-bcmath php7.4-bz2 php7.4-intl php7.4-gd php7.4-mbstring php7.4-mysql php7.4-zip php7.4-json"
php80="php8.0-fpm php8.0-curl php8.0-common php8.0-bcmath php8.0-bz2 php8.0-intl php8.0-gd php8.0-mbstring php8.0-mysql php8.0-zip"
php81="php8.1-fpm php8.1-curl php8.1-common php8.1-bcmath php8.1-bz2 php8.1-intl php8.1-gd php8.1-mbstring php8.1-mysql php8.1-zip"
php82="php8.2-fpm php8.2-curl php8.2-common php8.2-bcmath php8.2-bz2 php8.2-intl php8.2-gd php8.2-mbstring php8.2-mysql php8.2-zip"
php83="php8.3-fpm php8.3-curl php8.3-common php8.3-bcmath php8.3-bz2 php8.3-intl php8.3-gd php8.3-mbstring php8.3-mysql php8.3-zip"
# ---------------------------------------------------------------------------- #
# FUNCTIONS                                                                    #
# ---------------------------------------------------------------------------- #

#
# Echoes a red message
#
echo-red() {
    echo -e "${RED}$1${NC}"
}

#
# Echoes a green message
#
echo-green() {
    echo -e "${GREEN}$1${NC}"
}

#
# Echoes a yellow message
#
echo-yellow() {
    echo -e "${YELLOW}$1${NC}"
}




#
# Verifies sudo 
#
systemmanager-verify-sudo() {

    if [ "$EUID" -ne 0 ]
      then echo-red "Please execute as root eg: sudo"
      echo-red "else contact server administrator"	    
      exit 1
    fi

}

systemmanager-install() {
    systemmanager-verify-sudo;

    if [ ! -e  "$CONFDIR" ]; then
        mkdir "$CONFDIR"
    fi
    
    cp -r $(pwd)/. $CONFDIR
    ln -s -f $CONFDIR/websitemanager /usr/bin/websitemanager
    ln -s -f $CONFDIR/systemmanager /usr/bin/systemmanager
    grep -q "ALL ALL = NOPASSWD: /usr/bin/websitemanager, /usr/bin/systemmanager, /bin/systemctl restart apache2, /bin/kill" /etc/sudoers
    if [[ $? != 0 ]] ; then
        echo "ALL ALL = NOPASSWD: /usr/bin/websitemanager, /usr/bin/systemmanager, /bin/systemctl restart apache2, /bin/kill" >> /etc/sudoers
    fi

    echo
    echo
    echo-green "Script installed! use: systemmanager and websitemanager"
    echo
    echo
}

function mysqlcred(){
	if [ ! -f ${mysqlpwd} ]; then
		echo-red "Please enter mysql username"
	    	read mysqluser
		echo-red "Please enter mysql password"
		read mysqluserpasswd
#save mysql credentials in file for further uses
		echo -e "${mysqluser}\n${mysqluserpasswd}" > ${mysqlcred}
	else
	    mysqluser=$(head -n 1 ${mysqlcred})
	    mysqluserpasswd=$(tail -n 1 ${mysqlcred})  
fi
}


function installpkgselect(){
    #!/bin/bash
onoff=off
cmd=(dialog --output-fd 1 --separate-output --extra-button --extra-label "Select All" --cancel-label "Select None" --checklist "Select Packages:" 0 0 0)
load-dialog () {
    options=(
                1 "Essentials" on
                2 "Database" on
                3 "Apache" on
                4 "Php7.0" $onoff
                5 "Php7.1" $onoff
                6 "Php7.2" $onoff
                7 "Php7.3" $onoff
                8 "Php7.4" $onoff
                9 "Php8.0" on
                10 "Php8.1" $onoff
                11 "Php8.2" $onoff
                12 "Php8.3" $onoff
                13 "Vscode" on
                14 "Google Chrome" on


    )
    choices=$("${cmd[@]}" "${options[@]}")
}
load-dialog
exit_code="$?"
while [[ $exit_code -ne 0 ]]; do
case $exit_code in
    1) clear; onoff=off; load-dialog;;
    3) clear; onoff=on; load-dialog;;
esac
exit_code="$?"
done
clear
for choice in $choices
do
    case $choice in
        1) Essentials="$commonpkg";;
        2) mariadb="$databasepkg";;
        3) apache2="$apache";; 
        4) php70fpm="$php70";;
        5) php71fpm="$php71";; 
        6) php72fpm="$php72";; 
        7) php73fpm="$php73";; 
        8) php74fpm="$php74";; 
        9) php80fpm="$php80";; 
        10) php81fpm="$php81";; 
        11) php82fpm="$php82";; 
        12) php83fpm="$php83";;
        13) vscode=on  
    esac
done
}

function mariadbselect(){	
	
	HEIGHT=15
	WIDTH=40
	CHOICE_HEIGHT=4
	BACKTITLE="Mariadb"
	TITLE="Select version"
	MENU="Choose one of the following options:"

	OPTIONS=(1 "Mariadb 10.4"
         2 "Mariadb 10.5"
         3 "Mariadb 10.6"
         4 "Mariadb 10.7"
         5 "Mariadb 10.8"
         6 "Mariadb 10.9"
         7 "Mariadb 10.10"
         8 "Mariadb 10.11")
        

	CHOICE=$(dialog --clear \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --menu "$MENU" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)

	clear
	case $CHOICE in
	        1)
	            dbv='4';;
	        2)
	            dbv='5';;
	        3)
	            dbv='6';;
	        4)
	            dbv='7';;
	        5)
	            dbv='8';;
	        6)
	            dbv='9';;
	        7)
	            dbv='10';;
	        8)
	            dbv='11';;
	        *)  
	            echo "wrong option selected, Try Again"
	            exit 1
	esac
}
mariarepo(){
    if [ ! -z $dbv ] && [ ! -f /etc/apt/sources.list.d/mariadb.list ]; then
        mariadbselect
        echo-green "selected database version is : Mariadb-server-10.$dbv"        
        curl -LsS https://r.mariadb.com/downloads/mariadb_repo_setup | sudo bash -s -- --mariadb-server-version="mariadb-10.$dbv" > /dev/null 2>&1
    
    fi
}
function mariaupdate(){
    
	if [ -d /var/lib/mysql ] ; then
	    echo-red "Would you like to upgrade mariadb y/n" 
	    read mariadb 
        if [ "$mariadb" = "y" ];then
        echo-red "Mariadb update requested"
            mariadbselect
            mariarepo
            rmdb
	    fi
    
    fi
}
function rmdb(){
    if [[ $mariadb == 'y' ]]; then
        rm /etc/apt/sources.list.d/mariadb*
	echo-red "removing existing mariadb database" 
	    apt remove -y mariadb-*  > /dev/null 2>&1
    fi    
}
function apacherepo(){
    if [[ ! -z $Apache ]]; then
        add-apt-repository ppa:ondrej/apache2 -y  > /dev/null 2>&1
        add-apt-repository ppa:ondrej/php -y  > /dev/null 2>&1
    fi
}
function apacheconfig(){
    if [[ -z $Apache ]]; then
        sed -i '/#<Directory/i \
        <Directory /home/*/public_html/> \
        Options Indexes FollowSymLinks \
        AllowOverride ALL \
        Require all granted \
        </Directory>' /etc/apache2/apache2.conf
    a2enmod "proxy proxy_http proxy_fcgi setenvif actions alias auth_basic env expires headers http2 mime ssl rewrite request mpm_itk" > /dev/null 2>&1
    a2enconf  "php-fpm php7.0-fpm php7.1-fpm  php7.2-fpm php7.3-fpm php7.4-fpm php8.0-fpm php8.1-fpm php8.2-fpm php8.3-fpm"  > /dev/null 2>&1
    fi
}

function phpconfig(){
for i in 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3
    do
       if [ -d "/etc/php/$i/fpm" ]; then
            #echo-red "/etc/php/$i/fpm"       
            cp $CONFDIR/phpini-templates/php$i.conf /etc/php/$i/fpm/php.ini
            rm -f /etc/php/$i/fpm/pool.d/www.conf
        fi
        
    done
}

function updatewpcli(){
    if [ ! -f "/usr/local/bin/wp" ]; then
    rm -f /usr/local/bin/wp
    curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar > /dev/null 2>&1
    chmod +x wp-cli.phar
    mv wp-cli.phar '/usr/local/bin/wp'
    fi    
}
function ssl(){
    if [ ! -d "/etc/ssl/selfsigned" ]; then
        mkdir -p /etc/ssl/selfsigned
        chmod +x "$CONFDIR/openssl/getcert.sh"
    fi    
}
function phpmyadmin(){
    #if [ ! -d "/usr/share/phpmyadmin" ]; then
    rm -rf /usr/share/phpmyadmin/
    mkdir -p /usr/share/phpmyadmin
    wget https://files.phpmyadmin.net/phpMyAdmin/5.2.0/phpMyAdmin-5.2.0-all-languages.zip -O /usr/share/phpmyadmin/phpmyadmin5.2.0.zip

    cd /usr/share/phpmyadmin/ && unzip -qq phpmyadmin5.2.0.zip && mv phpMyAdmin-5.2.0-all-languages/* .
    rm -rf /usr/share/phpmyadmin/phpmyadmin5.2.0.zip phpMyAdmin-5.2.0-all-languages
    if grep -xqFe "Alias /phpmyadmin /usr/share/phpmyadmin" "/etc/apache2/phpmyadmin.conf"; then
        echo ""
    else
cat << EOT > /etc/apache2/phpmyadmin.conf
Alias /phpmyadmin /usr/share/phpmyadmin

<Directory /usr/share/phpmyadmin>
    Options FollowSymLinks
    DirectoryIndex index.php
    AllowOverride all
    <FilesMatch \.php$>
                SetHandler "proxy:unix:/run/php/php8.0-fpm.sock|fcgi://localhost"
    </FilesMatch>
</Directory>
<Directory /usr/share/phpmyadmin/setup>
    Require all denied
</Directory>

<Directory /usr/share/phpmyadmin/libraries>
    Require all denied
</Directory>
EOT
echo "Include /etc/apache2/phpmyadmin.conf" >> /etc/apache2/apache2.conf

    fi
    
}

function reqpackages(){

    echo-green "Please wait while I'm installling essential packages, it may ask for input in initial phase."
    for i in $requiredpkg
    do
        sudo apt-get install -y $i > /dev/null 2>&1
    done
}

function composer(){
    sudo sh -c "echo 'precedence ::ffff:0:0/96 100' >> /etc/gai.conf"
    rm -rf /usr/local/bin/composer && rm -rf /usr/bin/composer
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    php -r "if (hash_file('sha384', 'composer-setup.php') === 'e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
    php composer-setup.php
    php -r "unlink('composer-setup.php');"
    sudo mv composer.phar /usr/bin/composer
}
function dnssetup(){
    systemctl disable systemd-resolved.service
    systemctl stop systemd-resolved.service
    unlink /etc/resolv.conf
    touch  /etc/resolv.conf
    echo "nameserver 192.168.0.3" > /etc/resolv.conf
    echo "nameserver 1.1.1.1" >> /etc/resolv.conf
}
function mysqluser(){
    #echo "MySql username is $mysqluser"
    #echo "MySql Passwd is $mysqluserpasswd"
    mysql -e "GRANT ALL PRIVILEGES ON *.* TO '$mysqluser'@'localhost' IDENTIFIED BY '$mysqluserpasswd';"
    mysql -e "FLUSH PRIVILEGES;"
}




#update-alternatives --set php /usr/bin/php8.0


function servicesrestart(){
serviceslist=(
        mariadb
        apache2
        php70fpm
        php71fpm
        php72fpm
        php73fpm
        php74fpm
        php80fpm
        php81fpm
        php82fpm
        php83fpm
    )

for service in "${serviceslist[@]}"
do
  if ! [[ -z ${!service+x} ]]; then
   sn=$(echo ${service} | echo "$service" | sed 's/[7-8]\B/&./g')
   service=$( echo ${sn} |sed 's/fpm/-fpm/g')
   cp $CONFDIR/phpini-templates/php$i.conf /etc/php/$i/fpm/php.ini
   systemctl enable  $service > /dev/null 2>&1
   systemctl start $service > /dev/null 2>&1
            
  fi
done
}
function otherservices(){
     systemctl enable ssh  > /dev/null 2>&1
     systemctl start  ssh > /dev/null 2>&1

}
function installpackages(){
    sudo apt update -y  > /dev/null 2>&1
    echo-yellow "Please wait while installing selected packages"
    for i in $Essentials $mariadb $apache2 $php70fpm $php71fpm $php72fpm $php73fpm $php74fpm $php80fpm $php81fpm $php82fpm $php83fpm; do
  sudo apt install -y $i  > /dev/null 2>&1
done
    
}
function chrome-browser(){
  wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  apt install -y -f ./google-chrome-stable_current_amd64.deb > /dev/null 2>&1
}


#execute functions
echo-green "Executing Func. systemmanager-verify-sudo" 
systemmanager-verify-sudo
echo-green "Executing Func. systemmanager-install"
systemmanager-install
echo-green "Executing Func. reqpackages"
reqpackages
echo-green "Executing Func. mariaupdate"
mariaupdate
echo-green "Executing Func. mariarepo"
mariarepo
echo-green "Executing Func. installpkgselect"
installpkgselect
echo-green "Executing Func. apacherepo"
apacherepo
echo-green "Executing Func. installpackages"
installpackages
echo-green "Executing Func. apacheconfig"
apacheconfig
echo-green "Executing Func. phpmyadmin"
phpmyadmin
echo-green "Executing Func. phpconfig"
phpconfig
echo-green "Executing Func. updatewpcli"
updatewpcli
echo-green "Executing Func. composer"
composer
echo-green "Executing Func. dnssetup"
dnssetup
echo-green "Executing Func. servicesrestart"
servicesrestart
echo-green "Executing Func. mysqlcred"
mysqlcred
echo-green "Executing Func. mysqluser"
mysqluser
echo-green "Executing Func. chrome-browser"
chrome-browser
